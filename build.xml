<?xml version="1.0" encoding="UTF-8" ?>

<project name="Carrot2 main build file" default="help">
  <property file="${user.home}/.carrot.properties" />
  <property file="local-build.properties" />

  <property name="release.number"   value="1.0-RC2" />

  <property name="build.compiler"   value="modern" />
  <property name="javac.optimize"   value="off" />
  <property name="javac.debug"      value="on" />

  <!-- ## override these properties in your local property
       ## file if you want to change your deployment
       ## host (these replace tokens in descriptors)
       ## You can override distribution.dir to point to your tomcat's webapps
       ## folder, for example. -->
  <property name="deployment.port" value="8080" />
  <property name="deployment.host" value="localhost" />
  <property name="distribution.dir" value="tmp" />
  <property name="tests.report.dir" value="tmp/test-report" />

  <!-- Load ant-contrib task library -->
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath location="${carrot2.cvs.dir}/lib/ant-extensions/ant-contrib.jar" />
  </taskdef>

  <property name="carrot2.cvs.dir" location="${basedir}" />
  <import file="${carrot2.cvs.dir}/components/carrot2-ant-extensions/bootstrap.xml" />

  
  <target name="javadoc">
    <property name="javadoc.dir" location="tmp/javadoc" />

    <delete dir="${javadoc.dir}" />
    <delete dir="tmp/src" />

    <mkdir dir="tmp/src" />
    <mkdir dir="${javadoc.dir}" />

    <copy failonerror="true" filtering="false" overwrite="true" todir="tmp/src">
        <fileset dir=".">
            <include name="**/src/**/*.java" />
        </fileset>
        <chainedmapper>
            <filtermapper><replacestring from="\" to="/"/></filtermapper>
            <mapper type="regexp" from="^(.+)/src/(.+)" to="\2"/>
        </chainedmapper>
    </copy>

    <javadoc
             destdir          = "${javadoc.dir}"
             protected        = "true"
             version          = "false"
             use              = "false"
             doctitle         = "${ant.project.name}"
             header           = "${ant.project.name}"
             footer           = "Please refer to project documentation at &lt;br&gt;&lt;a href=http://www.carrot2.org&gt;http://www.carrot2.org&lt;/a&gt;"
             bottom           = "&lt;center&gt;Copyright (c) Copyright (C) Dawid Weiss, Stanislaw Osinski &lt;/center&gt;"
             failonerror      = "true"
             stylesheetfile   = "${carrot2.cvs.dir}/etc/javadoc/stylesheet.css"
             useexternalfile  = "true"
    >
        <classpath>
            <fileset dir=".">
                <include name="**/lib/*.jar" />
                <include name="lib/**/*.jar" />
            </fileset>
        </classpath>

        <fileset dir="tmp/src">
            <include name="**/*.java" />
        </fileset>
    </javadoc>

    <delete dir="tmp/src" />
  </target>



  <target name="build">
  	<description>
	Builds all components included in 'apply-to-components'
	target.
	</description>

    <macrodef name="component-apply">
      <attribute name="component.path"/>
      <sequential>
        <echo>
################################################################
BUILDING: @{component.path}
################################################################
        </echo>
        <ant antfile="build.xml"
             dir="@{component.path}" inheritall="false"
             target="build"
        />
      </sequential>
    </macrodef>
    <antcall target="apply-to-components" />
    
    <macrodef name="application-apply">
        <attribute name="application.path" />
        <sequential>
            <component-apply component.path="@{application.path}" />
        </sequential>
    </macrodef>
    <antcall target="apply-to-applications" />
  </target>



  <target name="dist">
    <delete dir="dist" failonerror="false" />

    <mkdir dir="dist" />
    <mkdir dir="dist/remote/webapps" />
    <mkdir dir="dist/remote/shared/lib" />
    <mkdir dir="dist/remote/conf" />
    <mkdir dir="dist/local" />
    
    <ant antfile="build.xml" dir="." inheritall="false" inheritrefs="false" target="remote">
        <property name="distribution.dir.remote" location="dist/remote/webapps" />
        <property name="distribution.dir.remote.libs" location="dist/remote/shared/lib" />
        <property name="deployment.port" value="8080" />
        <property name="deployment.host" value="localhost" />
    </ant>
    <copy todir="dist/remote">
        <fileset dir="etc/conf-tomcat">
            <include name="**/*" />
        </fileset>
    </copy>

    <ant antfile="build.xml" dir="applications/carrot2-demo-browser"
        inheritall="false" inheritrefs="false" target="dist" />
    <copy todir="dist/local">
        <fileset dir="applications/carrot2-demo-browser/tmp/dist" />
        <fileset dir="applications/carrot2-demo-browser">
            <include name="readme*" />
        </fileset>
    </copy>

    <zip basedir="dist/local" 
        zipfile="dist/carrot2-local-demo-${release.number}.zip" />
    <zip basedir="dist/remote" 
        zipfile="dist/carrot2-remote-demo-${release.number}.zip" />
  </target>



  <target name="clean">
  	<description>
	Cleans intermediate files of all
	components included in 'apply-to-components'
	target.
	</description>

    <macrodef name="component-apply">
      <attribute name="component.path"/>
      <sequential>
        <echo>
CLEANING: @{component.path}
        </echo>
        <ant antfile="build.xml"
             dir="@{component.path}" inheritall="false"
             target="clean"
        />
      </sequential>
    </macrodef>
    <antcall target="apply-to-components" />
    
    <macrodef name="application-apply">
        <attribute name="application.path" />
        <sequential>
            <component-apply component.path="@{application.path}" />
        </sequential>
    </macrodef>
    <antcall target="apply-to-applications" />
    
    <delete dir="tmp" />
    <delete dir="dist" />
  </target>



  <target name="cleanall">
  	<description>
	Cleans all intermediate files of all
	components included in 'apply-to-components'
	target.
	</description>

    <macrodef name="component-apply">
      <attribute name="component.path"/>
      <sequential>
        <echo>
CLEANING: @{component.path}
        </echo>
        <ant antfile="build.xml"
             dir="@{component.path}" inheritall="false"
             target="cleanall"
        />
      </sequential>
    </macrodef>
    <antcall target="apply-to-components" />

    <macrodef name="application-apply">
        <attribute name="application.path" />
        <sequential>
            <component-apply component.path="@{application.path}" />
        </sequential>
    </macrodef>
    <antcall target="apply-to-applications" />
    
    <delete dir="tmp" />
    <delete dir="dist" />
  </target>



  <target name="test">
  	<description>
	Runs test task for all
	components included in 'apply-to-components'
	target.
	</description>

    <property name="tests.failure.marker" location=".test-failure" />

    <macrodef name="component-apply">
      <attribute name="component.path"/>
      <sequential>
        <echo>
TESTING: @{component.path}
        </echo>
        <ant antfile="build.xml" dir="@{component.path}" inheritall="false" target="test">
            <property name="tests.failure.marker" location="${tests.failure.marker}" />
        </ant>
      </sequential>
    </macrodef>

    <delete failonerror="false" file="${tests.failure.marker}" />
    <antcall target="apply-to-components" />
    
    <!-- Generate one report for all components -->
    <antcall target="test.report" />

    <if>
        <available file="${tests.failure.marker}" type="file" />
        <then>
            <fail>Component tests failed.</fail>
        </then>
    </if>
  </target>


  <target name="test.report">
    <delete dir="${tests.report.dir}" failonerror="false" />
    <mkdir dir="${tests.report.dir}" />
    <junitreport todir="${tests.report.dir}">
        <fileset dir=".">
            <include name="**/junit-temp/TEST-*.xml"/>
        </fileset>
        <report format="frames" todir="${tests.report.dir}"/>
    </junitreport>
  </target>


  <target name="apply-to-applications">
    <application-apply application.path="applications/carrot2-clustering-benchmark" />
    <application-apply application.path="applications/carrot2-grokker-clusterizer" />
    <application-apply application.path="applications/carrot2-lucene-example" />
    <application-apply application.path="applications/carrot2-nutch-plugin" />
    <application-apply application.path="applications/carrot2-demo-browser" />
    <application-apply application.path="applications/carrot2-odp-tools" />
  </target>



  <target name="apply-to-components">
  	<description>
	Add components that compile here.
	</description>

    <component-apply component.path="components/carrot2-ant-extensions" />
    <component-apply component.path="components/carrot2-local-core" />
    <component-apply component.path="components/carrot2-util-common" />
    <component-apply component.path="components/carrot2-util-local" />
    <component-apply component.path="components/carrot2-util-remote" />
    <component-apply component.path="components/carrot2-util-tokenizer" />
    <component-apply component.path="components/carrot2-util-matrix" />
    <component-apply component.path="components/carrot2-util-lang-guesser" />

    <component-apply component.path="components/carrot2-input-xml" />
    <component-apply component.path="components/carrot2-input-lucene" />
    <component-apply component.path="components/carrot2-input-googleapi" />
    <component-apply component.path="components/carrot2-input-yahooapi" />
    <component-apply component.path="components/carrot2-input-local-cache" />

    <component-apply component.path="components/carrot2-odp-core" />
    <component-apply component.path="components/carrot2-output-cluster-metrics" />

    <component-apply component.path="components/carrot2-local-remote-adapters" />

    <component-apply component.path="components/carrot2-stemmer-stempelator" />
    <component-apply component.path="components/carrot2-stemmer-stempel" />
    <component-apply component.path="components/carrot2-stemmer-snowball" />

    <component-apply component.path="components/carrot2-input-snippet-reader" />
    <component-apply component.path="components/carrot2-input-verbatim" />

    <component-apply component.path="components/carrot2-filter-case-normalizer" />
    <component-apply component.path="components/carrot2-filter-lingo" />
    <component-apply component.path="components/carrot2-filter-ahc" />
    <component-apply component.path="components/carrot2-filter-fuzzyants" />
    <component-apply component.path="components/carrot2-filter-stc" />
    <component-apply component.path="components/carrot2-filter-stemmer" />
    <component-apply component.path="components/carrot2-filter-trc" />

    <component-apply component.path="components/carrot2-filter-stream-interceptor" />
    <component-apply component.path="components/carrot2-output-xsltrenderer" />

    <component-apply component.path="components/carrot2-remote-controller" />
    <component-apply component.path="components/carrot2-local-controller" />
  </target>



  <target name="license" depends="bootstrap" description="Update/ add licensing info to source code files. ONLY FOR PACKAGE MAINTAINER.">
	<condition property="cond:is.maintainer">
		<equals arg1="${user.name}" arg2="dawid weiss" casesensitive="false" trim="true" />
	</condition>

	<fail unless="cond:is.maintainer">
	### ERROR: TARGET FOR USE ONLY BY PACKAGE MAINTAINER.
	</fail>

    <loadfile encoding="UTF-8" property="carrot2.license" srcfile="etc/codeconvention/header.txt" />
    <loadfile encoding="UTF-8" property="carrot2.ccg.license" srcfile="etc/codeconvention/header-ccg.txt" />
    <loadfile encoding="UTF-8" property="carrot2.generated.code" srcfile="etc/codeconvention/header-generated.txt" />

    <licenseReplace encoding="UTF-8" saveExtension="">
        <fileset dir=".">
            <include name="**/*.java" />
            <exclude name="**/tmp/**" />
        </fileset>

        <!-- Order matters - first come, first served. -->
        <header contains="Sponsored by: CCG, Inc." 
                replacement="${carrot2.ccg.license}" />
        <header contains="http://www.carrot2.org/carrot2.LICENSE"
                replacement="${carrot2.license}" />

        <!-- Replace generated headers with a simple statement -->
        <header contains="${carrot2.generated.code}"           replacement="${carrot2.generated.code}" />
        <header contains="http://www.castor.org"               replacement="${carrot2.generated.code}" />
        <header contains="The following code was generated by" replacement="${carrot2.generated.code}" />
        <header contains="Generated By:JavaCC"                 replacement="${carrot2.generated.code}" />
        <header contains="generated automatically by the Snowball to Java" replacement="${carrot2.generated.code}" />

        <!-- Replace empty headers with C2 license -->
        <header isempty="true"
                replacement="${carrot2.license}" />
    </licenseReplace>

    <licenseList header="true" footer="true" encoding="UTF-8" verbose="false">
        <fileset dir=".">
            <include name="**/*.java" />
            <exclude name="**/tmp/**" />
        </fileset>
    </licenseList>
  </target>



  <target name="remote" depends="bootstrap">
    <description>
    Collects all remote Web components into 'distribution.dir.remote'
    directory and their required JARs into 'distribution.dir.remote.libs'
    directory.
    </description>

    <property name="distribution.dir.remote"      location="${distribution.dir}/remote" />
    <property name="distribution.dir.remote.libs" location="${distribution.dir}/remote-libs" />

    <mkdir dir="${distribution.dir.remote}" />

    <property name="carrot2.cvs.dir" location="." />

    <path id="dependencies">
        <fileset dir=".">
            <include name="lib/**/*.dep.xml" />
            <include name="components/*/*.dep.xml" />
            <include name="components/*/lib/*.dep.xml" />
        </fileset>
        <path path="${extra.dependencies.path}" />
    </path>

    <!-- Invoke the remote controller's build file to update it. -->
    <ant antfile="build.xml"
    	 dir="components/carrot2-remote-controller"
    	 inheritall="false" inheritrefs="false">
    	 <property name="deployment.host" value="${deployment.host}"/>
    	 <property name="deployment.port" value="${deployment.port}"/>
    </ant>

    <bringToDate componentDescriptor="etc/all-remote.dep.xml"
                 dependenciesOnly="true" profile="">
        <dependencies refid="dependencies" />
    </bringToDate>

    <copyDependencies
        componentDescriptor="etc/all-remote.dep.xml"
        profile=""
        todir="${distribution.dir.remote}">
        <dependencies refid="dependencies" />
    </copyDependencies>

    <mkdir dir="${distribution.dir.remote.libs}" />
    <move todir="${distribution.dir.remote.libs}">
        <fileset dir="${distribution.dir.remote}">
            <exclude name="libs/**" />
            <exclude name="*.war" />
            <exclude name="carrot*.LICENSE" />
            <exclude name="carrot*.CONTRIBUTORS" />
            <include name="*.jar" />
        </fileset>
    </move>
  </target>



  <target name="help">
    <echo>
Available targets:

build   - builds all components in all profiles.

clean   - cleans intermediate files.

javadoc - creates JavaDoc documentation.

remote  - builds all remote components, and
          copies them to a directory pointed
          to by 'distribution.dir.remote'. Libraries
          are copied to 'distribution.dir.remote.libs'.
          Default values for these properties
          are 'tmp/remote' and 'tmp/remote-libs'.

Available properties (passed using -Dproperty=true)

copy.dependencies  - Creates a subfolder in a distribution
       directory of a component with all components and
       libraries that it requires. Only suggested for use
       with 'build' target.

single.jar - used in conjunction with 'copy.dependencies'.
       if 'true', Carrot2 components are repacked into a
       single JAR. 'true' by default.
    </echo>
  </target>

</project>
