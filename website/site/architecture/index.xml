<?xml version="1.0" encoding="UTF-8"?>

<page section="architecture" xmlns:lang="http://www.cs.put.poznan.pl/dweiss/index.php/projects/sin/lang">
	<!-- Page info section -->
	<languages>
		<lng id="en">English</lng>
		<lng id="pl">Polski</lng>
		<default id="en"/>
	</languages>

	<title lng="en">Architecture</title>
	<title lng="pl">Architektura</title>

            <lang:pl>
            <frame>
            Ta strona jeszcze nie została przepisana na język polski. Proszę
            przełączyć się na <a href="/architecture/index.xml?lang=en">wersję angielską</a>.
            </frame>
            </lang:pl>            

            <lang:en>            
            <chapter level="1">
                <title>Architecture</title>

            <p><carrot-text/> is based on a concept of separate components, which communicate
               only by passing XML data. The communication protocol is restricted to HTTP,
               POST method specifically. This allows for great flexibility in adding new components,
               as the language of implementation and physical location may remain unknown.
            </p>
            <p>
                <illustration src="/gfx/carrot2/figures/components-dataflow.gif" float="right">
				    <description>1: A scenario of data flow in <carrot-text/> architecture</description>
                </illustration>
            There are four component types in Carrot<sup>2</sup>:
                <ul>
                    <li><b>Input</b> - This type of component accepts user query request (wrapped
                    in standard XML and passed via HTTP POST), and is in charge of producing some
                    document list, which should &quot;match&quot; the query. Upon successful processing,
                    the component is required to produce a valid XML result stream.
                    </li>
                    <li><b>Filter</b> - This type of component accepts result stream from Input, or
                    Filter components, and does some processing on it. At the end of processing,
                    it is required to return unchanged input stream, with perhaps intermixed custom
                    tags (the result of processing). Such tags may include, for instance, alternate
                    relevance ranking of results, grouping of similar documents, or other.
                    </li>
                    <li><b>Output</b> - Output component type is in charge of somehow presenting the
                    results to the user. The results, which this component produces are not defined (it
                    may produce HTML page, display a Swing applet, or write results to disk). Components
                    of this type usually interact with Controllers to present processing results to the user.
                    </li>
                    <li><b>Controller</b> - A component, which binds all other together to form a processing stream.
                    Carrot<sup>2</sup> is a Controller component, because it allows to select input, filter and
                    output components and facilitates communication among them. However, other controller
                    components are possible, such as command-line processors, or local application (as opposed to
                    Web-accessible) controllers.
                    </li>
                </ul>
                
             It should be clearly stated that the scenario of data flow presented in figure 1
             is not optimal (because data is sent back and forth between components and the controller),
             but it was a design-decision to simplify component-side programming.
            </p>
            <p>
            A detailed description of architecture, data exchange protocols and other elements of the
            framework is given in the official Developers Manual (see 
            <a href="/developers/index.xml">developers section</a>).
            </p>
            </chapter>

            
            </lang:en>	
</page>