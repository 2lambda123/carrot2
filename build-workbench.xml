<project name="carrot2.workbench" default="build">
  <!-- Basedir relative to this build file -->
  <dirname property="carrot2.master.basedir" file="${ant.file.carrot2.workbench}"/>

  <!-- Import local properties and version -->
  <property file="${carrot2.master.basedir}/local.properties" />

  <property file="${carrot2.master.basedir}/etc/version/carrot2.version" />
  <property file="${carrot2.master.basedir}/etc/version/carrot2.basenames" /> 

  <property file="${carrot2.master.basedir}/workbench.properties" />
  <property file="${carrot2.master.basedir}/workbench/build-conf/build.properties" />

  <property name="workbench.build.dir" location="tmp/workbench" />
  <property name="workbench.tests.html.report.dir" location="${workbench.build.dir}/test-report" />
  <property name="workbench.tests.txt.report.dir"  location="${workbench.build.dir}/test-report-txt" />

  <property name="custom.tasks.dir" location="${carrot2.master.basedir}/lib/org.carrot2.antlib" />

  <patternset id="temporary.files">
    <exclude name="**/.svn/**" />
    <exclude name="**/tmp/**" />
    <exclude name="**/.clover/**" />
  </patternset>

  <!-- Macros -->
  <macrodef name="launchAntRunner">
    <attribute name="buildfile" />
    <attribute name="build.dir" />
    <attribute name="props.file" default="${carrot2.master.basedir}/workbench.properties" />
    <attribute name="extra.args" default="" />
    <sequential>
      <!-- Copy source plugins and features to the build folder. -->
      <copy todir="@{build.dir}/plugins">
        <fileset dir="${carrot2.master.basedir}/core">
          <patternset refid="temporary.files" />
        </fileset>
      
        <fileset dir="${carrot2.master.basedir}//lib">
          <patternset refid="temporary.files" />
        </fileset>
      
        <fileset dir="${carrot2.master.basedir}/workbench">
          <patternset refid="temporary.files" />
          <exclude name="build-conf/**" />
          <exclude name="org.carrot2*.feature/**" />
        </fileset>
      </copy>
      
      <copy todir="@{build.dir}/features">
        <fileset dir="${carrot2.master.basedir}/workbench">
          <patternset refid="temporary.files" />
          <include name="org.carrot2*.feature/**" />
        </fileset>
      </copy>

      <!-- Launch the builder. -->
      <java jar="${eclipse.home}/plugins/${equinox.launcher.plugin.jar}"
            fork="true" failonerror="true">
        <arg line="-application org.eclipse.ant.core.antRunner" />
        <arg line="-buildfile @{buildfile}" />
        <arg line="-Dbuilder=${carrot2.master.basedir}/workbench/build-conf/" />
        <arg line="-DbuildDirectory=@{build.dir}" />
        <arg line="-Dtarget.platform=${target.platform}" />
        <arg line="-Dcarrot2.master.basedir=${carrot2.master.basedir}" />
        <arg line="@{extra.args}" />
        <arg line="-propertyfile @{props.file}" />
      </java>
    </sequential>
  </macrodef>

  <macrodef name="checkAccessRestriction">
    <attribute name="logsBasedir" />
    <sequential>
      <fail message="Access Restriction errors during build! Are you sure all packages are visible at runtime?">
        <condition>
          <resourcecount when="greater" count="0">
            <fileset dir="@{logsBasedir}">
              <include name="**/compilelogs/**" />
              <contains text="Access restriction" />
            </fileset>
          </resourcecount>
        </condition>
      </fail>
    </sequential>
  </macrodef>

  <!-- Initialize the build. -->
  <target name="init">
    <ant dir="${custom.tasks.dir}" antfile="build.xml" target="jar" />

    <taskdef resource="org.carrot2.antlib.xml">
      <classpath>
        <pathelement location="${custom.tasks.dir}/org.carrot2.antlib.jar" />
      </classpath>
    </taskdef>

    <findVersion property="equinox.launcher.plugin.jar"
                 eclipsehome="${eclipse.home}"
                 pluginid="org.eclipse.equinox.launcher"
                 pluginform="jar" />

    <findVersion property="pde.build.plugin"
                 eclipsehome="${eclipse.home}"
                 pluginid="org.eclipse.pde.build"
                 pluginform="dir" />

    <echo>Equinox version: ${equinox.launcher.plugin.jar}, PDE build plugin: ${pde.build.plugin}</echo>
    
    <!-- Compute attribute metadata. -->
    <ant antfile="${carrot2.master.basedir}/build.xml" target="attrs" />    
  </target>


  <!-- Build the workbench. -->
  <target name="build" description="Build the workbench" depends="init">
    <!-- Compile and assemble the workbench. -->
    <launchAntRunner buildfile="${eclipse.home}/plugins/${pde.build.plugin}/scripts/productBuild/productBuild.xml"
                     build.dir="${workbench.build.dir}/build-dir"
                     props.file="${carrot2.master.basedir}/workbench.properties"
                     extra.args="
                        -Dproduct=/org.carrot2.workbench.feature/Workbench.product" />

    <checkAccessRestriction logsbasedir="${workbench.build.dir}/build-dir" />
  </target>


  <!-- Build the test distribution and run the tests. -->
  <target name="test" description="Builds workbench and run the tests" depends="init">
    <!-- Build the test distribution. -->
    <launchAntRunner buildfile="${eclipse.home}/plugins/${pde.build.plugin}/scripts/productBuild/productBuild.xml"
                     build.dir="${workbench.build.dir}/test-dir"
                     props.file="${carrot2.master.basedir}/workbench.test.properties"
                     extra.args="
                        -Dproduct=/org.carrot2.workbench.feature/Workbench.product 
                        -DfeatureList=org.carrot2.workbench.core.test.feature" />

    <checkAccessRestriction logsbasedir="${workbench.build.dir}/test-dir" />

    <property name="test.eclipse.home" 
        location="${workbench.build.dir}/test-dir/tmp/${archivePrefix}" />

    <findVersion property="workbench.core.test.dir"
                 pluginid="org.carrot2.workbench.core.test"
                 pluginform="dir"
                 eclipsehome="${test.eclipse.home}" />

    <property name="org.carrot2.antlib" location="lib/org.carrot2.antlib" />
    <java jar="${eclipse.home}/plugins/${equinox.launcher.plugin.jar}" fork="true" failonerror="true">
      <arg line="-application org.eclipse.ant.core.antRunner" />
      <arg line="-buildfile ${test.eclipse.home}/plugins/${workbench.core.test.dir}/test.xml" />
      <arg line="-Declipse-home=${test.eclipse.home}" />
      <arg line="-Dorg.carrot2.antlib=${org.carrot2.antlib}" />
      <arg line="-Dos=${test.os} -Dws=${test.ws} -Darch=${test.arch}" />
    </java>

    <!-- JUnit report -->
    <mkdir dir="${workbench.tests.html.report.dir}" />
    <junitreport todir="${workbench.tests.html.report.dir}">
      <fileset dir="${workbench.build.dir}/test-dir/tmp/${archivePrefix}">
        <include name="*.xml" />
      </fileset>
      <report format="frames"
              todir="${workbench.tests.html.report.dir}" />
    </junitreport>

    <!-- Copy XML reports -->
    <copy todir="${workbench.tests.html.report.dir}">
      <fileset dir="${workbench.build.dir}/test-dir/tmp/${archivePrefix}">
        <include name="*.xml" />
      </fileset>
      <mapper type="glob" from="*.xml" to="TEST-*.xml" />
    </copy>

    <!-- Copy text reports -->
    <mkdir dir="${workbench.tests.txt.report.dir}" />
    <copy todir="${workbench.tests.txt.report.dir}">
      <fileset dir="${workbench.build.dir}/test-dir/tmp/${archivePrefix}/raw-output">
        <include name="*.txt" />
      </fileset>
    </copy>

    <!-- 
        A hacky way of finding out whether tests passed. The Eclipse runner doesn't
        seem to expose this information directly.
      -->
    <loadfile property="testxml"
              srcFile="${workbench.tests.html.report.dir}/TESTS-TestSuites.xml" />
    <fail message="Tests failed, see ${workbench.tests.html.report.dir} for report.">
      <condition>
          <matches string="${testxml}" pattern="(failures|errors)=.[1-9][0-9]*" />
      </condition>
    </fail>
    <fail message="Tests did not run, see ${workbench.tests.txt.report.dir} for logs.">
      <condition>
          <matches string="${testxml}" pattern="testsuites />" />
      </condition>
    </fail>
  </target>

  <target name="clean">
    <delete dir="${workbench.build.dir}" />
  </target>
</project>
