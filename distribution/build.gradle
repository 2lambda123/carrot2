import org.apache.tools.ant.filters.*
import org.apache.tools.ant.taskdefs.condition.Os
import java.nio.file.Files

plugins {
  id 'base'
}

ext {
  distTarget = file("$buildDir/dist")
  distShadow = file("$buildDir/distCheck")
  distZip = file("$buildDir/distZip")
}

configurations {
  dcs
  examples
  mavenArtifacts
}

dependencies {
  dcs project(path: ":dcs:distribution", configuration: "distDir" )
  examples project(path: ":core-examples", configuration: "distribution" )
  mavenArtifacts project(path: ":", configuration: "mavenArtifacts")
}

task syncDist(type: Sync) {
  def antPrj = new org.apache.tools.ant.Project()
  afterEvaluate {
    replaceTokens.each { k, v -> antPrj.setProperty(k.toString(), v.toString()) }
  }

  inputs.properties replaceTokensTrigger

  from legal

  from(files('src/main/assembly'), {
    filteringCharset = 'UTF-8'
    filter(ExpandProperties, project: antPrj)
  })

  from(configurations.dcs) {
    into "dcs/"
  }

  from(configurations.examples) {
    into "examples/"
  }

  from(configurations.mavenArtifacts) {
    into "artifacts/"
  }

  into distTarget
}

task syncDistShadow(type: Sync) {
  dependsOn syncDist
  from distTarget
  into distShadow
}

task checkExamples(type: Exec) {
  dependsOn assemble, syncDistShadow

  def args = []
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    args += ['cmd', '/c', 'gradlew']
  } else {
    args += ['./gradlew']
  }
  args += ['--no-daemon']
  args += ['test']

  workingDir file("${distShadow}/examples")
  commandLine args
}

task checkDcsExamples(type: GradleBuild) {
  dependsOn assemble, syncDistShadow
  mustRunAfter checkExamples

  dir = file("${distShadow}/dcs/examples")
  tasks = ["compileJava"]
}
check.dependsOn(checkExamples, checkDcsExamples)

task zip(type: Zip) {
  dependsOn syncDist

  archiveFileName = "carrot2-${project.version}.zip"
  destinationDirectory = distZip

  from(distTarget, {
    filesMatching("**/dcs", {
      fileMode 0755
    })
  })

  into "carrot2-${project.version}/"
}

task bambooProps {
  def storedProps = replaceTokens.collectEntries { k,v -> [k, v.toString()] }
  def bambooPropsFile = file("${buildDir}/build.properties")

  inputs.properties(storedProps)
  outputs.file bambooPropsFile

  doFirst {
    def Properties p = new Properties();
    p.putAll(storedProps);
    Files.newBufferedWriter(bambooPropsFile.toPath()).withCloseable { w ->
      p.store(w, "Build properties file")
    }
  }
}

assemble.dependsOn bambooProps
assemble.dependsOn zip
