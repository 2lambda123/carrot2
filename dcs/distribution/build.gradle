import org.apache.tools.ant.filters.*

import java.time.LocalDateTime
import java.time.temporal.ChronoUnit

apply plugin: 'java'

configurations {
  ctxService
  ctxRoot
  ctxFrontend
  ctxProxy
  ctxDoc

  examples

  distZip
  distDir
}

dependencies {
  ctxService   project(path: ":dcs:contexts:service", configuration: 'war')
  ctxRoot      project(path: ":dcs:contexts:root", configuration: 'war')
  ctxProxy     project(path: ":dcs:contexts:proxy", configuration: 'war')
  ctxFrontend  project(path: ":dcs:contexts:frontend")
  ctxDoc       project(path: ":doc")

  examples     project(path: ":dcs:examples", configuration: "distribution")

  implementation "com.carrotsearch.console:launcher:${versions.console}"
  implementation "org.eclipse.jetty:jetty-server:${versions.jetty}"
  implementation "org.eclipse.jetty:jetty-webapp:${versions.jetty}"
}

ext {
  replaceTokens.jarname = 'dcs-launcher'
  outputDir = "$buildDir/dist"
  outputZip = "$buildDir/dist-zip"
}

jar {
  manifest {
    attributes("Main-Class": "com.carrotsearch.console.launcher.Launcher")
    attributes("Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' '))
  }

  archiveBaseName = replaceTokens.jarname.toString()
}

task collectDependencies(type: Sync) {
  from configurations.runtimeClasspath
  from jar

  into "$outputDir/lib"
}

task collectScripts(type: Sync) {
  from(files('src/main/assembly'), {
    include "**/*.sh"
    filteringCharset = 'UTF-8'
    filter(ReplaceTokens, tokens: replaceTokens)
    filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.LF)
    fileMode 0755
  })
  from(files('src/main/assembly'), {
    exclude "**/*.sh"
    filteringCharset = 'UTF-8'
    filter(ReplaceTokens, tokens: replaceTokens)
  })

  from legal

  inputs.properties([
    'version': replaceTokens.version,
    'gitRev': gitRev,

    // force refiltering every hour if nothing else changes.
    'tstamp': LocalDateTime.now().truncatedTo(ChronoUnit.HOURS)
  ])

  into "$outputDir"
  preserve {
    include 'lib/'
    include 'web/'
    include 'examples/'
  }
}

task collectCtxService(type: Sync) {
  dependsOn configurations.ctxService
  from zipTree(configurations.ctxService.asPath)
  into "$outputDir/web/service"
  preserve {
    include 'resources/'
  }
}

task collectCtxRoot(type: Sync) {
  dependsOn configurations.ctxRoot
  from zipTree(configurations.ctxRoot.asPath)
  into "$outputDir/web/root"
}

task collectCtxProxy(type: Sync) {
  dependsOn configurations.ctxProxy
  from zipTree(configurations.ctxProxy.asPath)
  into "$outputDir/web/proxy"
}

task collectCtxFrontend(type: Sync) {
  from configurations.ctxFrontend
  into "$outputDir/web/frontend"
}

task collectCtxDoc(type: Sync) {
  from configurations.ctxDoc
  into "$outputDir/web/doc"
}

task collectExamples(type: Sync) {
  from configurations.examples
  into "$outputDir/examples"
}

task distDir {
  dependsOn collectScripts,
            collectDependencies,
            collectCtxService,
            collectCtxRoot,
            collectCtxDoc,
            collectCtxFrontend,
            collectExamples

  // Until we have a need for it, don't include the proxy context in the distribution.
  // dependsOn collectCtxProxy

  outputs.file("$outputDir")
}

task distZip(type: Zip) {
  archiveFileName = "carrot2-dcs-${project.version}.zip"
  destinationDirectory = file("$outputZip")

  from(distDir, {
    exclude "**/*.sh"
  })

  from(distDir, {
    include  "**/*.sh"
    fileMode 0755
  })

  into "${archivesBaseName}/"
}

assemble.dependsOn distDir

artifacts {
  distZip tasks.distZip
  distDir file("$outputDir"), {
    builtBy distDir
  }
}

