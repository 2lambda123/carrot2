import org.apache.tools.ant.filters.*

import java.time.LocalDateTime
import java.time.temporal.ChronoUnit

apply plugin: 'java'

sourceSets {
  integTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integ-test/java')
    }
    resources.srcDir file('src/integ-test/resources')
  }
}

configurations {
  ctxService
  ctxRoot
  ctxFrontend
  examples

  integTestImplementation.extendsFrom testImplementation
  integTestRuntimeOnly.extendsFrom testRuntimeOnly

  distZip
  distDir
}

dependencies {
  ctxService  project(path: ":dcs:contexts:service", configuration: "war")
  ctxRoot     project(path: ":dcs:contexts:root", configuration: "war")
  ctxFrontend project(path: ":dcs:contexts:frontend")

  examples    project(path: ":dcs:examples", configuration: "distribution")

  implementation "com.beust:jcommander:1.72"

  implementation "org.eclipse.jetty:jetty-server:${versions.jetty}"
  implementation "org.eclipse.jetty:jetty-webapp:${versions.jetty}"

  implementation "org.apache.logging.log4j:log4j-core:${versions.log4j2}"
  implementation "org.apache.logging.log4j:log4j-slf4j-impl:${versions.log4j2}"

  integTestImplementation project(":dcs:examples")

  // Fairly neat agent for I/O leak detection.
  // testCompile "org.kohsuke:file-leak-detector:1.13"
}

ext {
  replaceTokens.jarname = 'dcs-launcher'
}

jar {
  manifest {
    attributes("Main-Class": "org.carrot2.dcs.Launcher")
    attributes("Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' '))
  }

  baseName = replaceTokens.jarname
}

task collectDependencies(type: Sync) {
  from configurations.runtimeClasspath
  from jar

  into "$buildDir/${project.name}/lib"
}

task collectScripts(type: Sync) {
  from files('src/main/assembly') {
    filteringCharset = 'UTF-8'
    filter(ReplaceTokens, tokens: replaceTokens)
  }
  from legal

  inputs.properties([
    'version': replaceTokens.version,
    'gitRev': gitRev,

    // force refiltering every hour if nothing else changes.
    'tstamp': LocalDateTime.now().truncatedTo(ChronoUnit.HOURS)
  ])

  into "$buildDir/${project.name}"
  preserve {
    include 'lib/'
    include 'web/'
    include 'examples/'
  }
}

task collectCtxService(type: Sync) {
  dependsOn configurations.ctxService
  from zipTree(configurations.ctxService.asPath)
  into "$buildDir/${project.name}/web/service"
  preserve {
    include 'resources/'
  }
}

task collectCtxRoot(type: Sync) {
  dependsOn configurations.ctxRoot
  from zipTree(configurations.ctxRoot.asPath)
  into "$buildDir/${project.name}/web/root"
}

task collectCtxFrontend(type: Sync) {
  from configurations.ctxFrontend
  into "$buildDir/${project.name}/web/frontend"
}

task collectExamples(type: Sync) {
  from configurations.examples
  into "$buildDir/${project.name}/examples"
}

task distDir {
  dependsOn collectScripts, collectDependencies, collectCtxService, collectCtxRoot, collectCtxFrontend, collectExamples

  outputs.file("$buildDir/${project.name}")
}

task distZip(type: Zip) {
  archiveFileName = "carrot2-dcs-${project.version}.zip"
  destinationDirectory = file("$buildDir/dist")
  duplicatesStrategy = 'fail'

  from distDir
  into "carrot2-dcs-${project.version}/"
}

task itJUnit(type: Test) {
  group "verification"
  dependsOn assemble, ":dcs:contexts:service:test"
  testClassesDirs = sourceSets.integTest.output.classesDirs
  classpath = sourceSets.integTest.runtimeClasspath

  outputs.upToDateWhen { false }
}

task itExamples(type: GradleBuild) {
  group "verification"
  dependsOn assemble

  dir "$buildDir/${project.name}/examples"
  setTasks(['clean', 'check', 'assemble'])
}

task integTest {
  group "verification"

  dependsOn itJUnit, itExamples
}

integTest.mustRunAfter test
check.dependsOn integTest
assemble.dependsOn distDir

artifacts {
  distZip tasks.distZip
  distDir file("$buildDir/${project.name}"), {
    builtBy distDir
  }
}

