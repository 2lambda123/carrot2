
<project name="Carrot2 Nightly demo deploy script." default="help" basedir=".">

    <property name="checkout.dir" location="tmp/checkouts" />
    <property name="cvs.pass" location="${user.home}/.cvspass" />
    <property name="module.name" value="carrot2" />
    <property name="cvs.root" value=":ext:dawidweiss@cvs.sourceforge.net:/cvsroot/carrot2" />

    <property name="build.dir" location="tmp/build.demo/components" />
    <property name="build.dir.libs" location="tmp/build.demo/libs" />
    <property name="runtime.env" location="../runtime" />
    <property name="runtime.webapps" location="${runtime.env}/context-webapps" />
    <property name="tests.report.dir" location="${runtime.env}/context-logs/unit-tests"/>

    <property name="deployment.port" value="2001" />
    <property name="deployment.host" value="carrot.cs.put.poznan.pl" />

    <property name="cvs.update.timestamp" location="tmp/.demo.update.mark" />
    
    <!-- 
      ## Prepare checkout directory and cvs environment.
      -->
    <target name="vars">
        <mkdir dir="${checkout.dir}" />
        <mkdir dir="${build.dir}" />
	<mkdir dir="${build.dir.libs}" />
        <tstamp>
            <format property="deploy.time" pattern="MM/dd/yyyy HH:mm z" locale="en"/>
        </tstamp>
        <touch file="${cvs.update.timestamp}" />
    </target>
      
    <target name="prepare" depends="vars,cvsupdate">
    </target>

    <target name="cvsupdate" unless="no.cvsupdate" depends="vars">
        <!-- <cvspass cvsroot="${cvs.root}" password="" passfile="${cvs.pass}"/> -->

        <ant antfile="cvsoperations.xml" target="cvs.checkout_or_update.module" inheritall="false">
            <property name="checkout.dir" location="${checkout.dir}" />
            <property name="cvs.pass"     location="${cvs.pass}" />
            <property name="module.name" value="${module.name}" />
            <property name="cvs.root" value="${cvs.root}" />
        </ant>
        <echo message="${deploy.time}" file="${cvs.update.timestamp}" append="false" />
    </target>

    <!-- 
      ## Clean previous build directory.
      -->
    <target name="clean">
        <delete dir="${build.dir}" failonerror="false"
                includeemptydirs="true" quiet="true" />
        <ant antfile="${checkout.dir}/${module.name}/build.xml"
             dir="${checkout.dir}/${module.name}" inheritall="false"
             target="clean">
             <property name="distribution.dir.remote" location="${build.dir}" />
             <property name="distribution.dir.remote.libs" location="${build.dir.libs}" />	     
        </ant>
    </target>

    <!-- 
      ## Build checked out components
      -->
    <target name="build.components">
        <ant antfile="${checkout.dir}/${module.name}/build.xml" 
             dir="${checkout.dir}/${module.name}" inheritall="false" 
             target="bootstrap"/>
        <ant antfile="${checkout.dir}/${module.name}/build.xml" 
             dir="${checkout.dir}/${module.name}" inheritall="false" 
             target="remote">
            <property name="distribution.dir.remote" location="${build.dir}" />
	    <property name="distribution.dir.remote.libs" location="${build.dir.libs}" />
            <property name="deployment.port" value="${deployment.port}" />
            <property name="deployment.host" value="${deployment.host}" />
        </ant>
    </target>

    <target name="tests">
        <mkdir dir="${tests.report.dir}" />
        <ant antfile="${checkout.dir}/${module.name}/build.xml"
             dir="${checkout.dir}/${module.name}" inheritall="false" target="test">
            <property name="tests.report.dir" location="${tests.report.dir}" />
        </ant>
    </target>
    
    <target name="waitforserver">
        <taskdef name="waitforserver" classname="com.dawidweiss.carrot.ant.WaitForServer">
        	<classpath location="lib/WaitForServer.jar" />
        </taskdef>
		<waitforserver url="http://${deployment.host}:${deployment.port}/carrot2-remote-controller/debug.jsp?status=true"
			timeout="240" encoding="UTF-8" token="OK" />
    </target>
    
    <!-- 
      ## Checkout the module to local directory and build it.
      -->
    <target name="build" depends="clean,prepare,build.components,customize.controller">
    </target>


    <!-- 
      ## Stops the runtime environment's tomcat
      -->
    <target name="stop.tomcat">
        <ant antfile="tomcat.xml" dir="." target="stop.tomcat">
            <property name="catalina.home" location="${runtime.env}" />
        </ant>
    </target>
    
    <target name="clean.webapps">
        <delete failonerror="false" includeemptydirs="true" quiet="true">
            <fileset dir="${runtime.webapps}">
                <exclude name=".cvsignore" />
            </fileset>
        </delete>
        <delete failonerror="false" includeemptydirs="true" quiet="true">
            <fileset dir="${runtime.env}/context-logs">
                <exclude name=".cvsignore" />
            </fileset>
        </delete>
        <delete failonerror="false" includeemptydirs="true" quiet="true">
            <fileset dir="${runtime.env}">
                <include name="work/**/*.*" />
                <include name="temp/**/*.*" />
                <include name="logs/**/*.*" />
                <exclude name="**/.cvsignore" />
            </fileset>
        </delete>
        <delete failonerror="false" includeemptydirs="false" quiet="true">
            <fileset dir="${runtime.env}/shared/lib">
                <include name="*.*" />
            </fileset>
        </delete>
    </target>

    <target name="copy.webapps">
        <copy overwrite="true" todir="${runtime.webapps}">
            <fileset dir="${build.dir}" includes="**/*.war" />
        </copy>
        <copy overwrite="true" todir="${runtime.env}/shared/lib">
            <fileset dir="${build.dir.libs}" includes="*.*" />
        </copy>
    </target>

    <target name="copy.logs">
        <style destdir="${runtime.env}/context-logs"
           in="log.xml"
           out="${runtime.env}/context-logs/build-log.html"
           style="misc/log2html.xsl"
        />
        <delete failonerror="false" includeemptydirs="true" quiet="true"
                file="log.xml" />
        <mkdir dir="${runtime.env}/context-logs/test-report" />
        <copy overwrite="true" todir="${runtime.env}/context-logs/test-report">
            <fileset dir="demo/no-logs-info" includes="**/*" />
        </copy>
    </target>
    
    <!-- 
      ## Copies necessary files and starts tomcat again.
      -->
    <target name="start.tomcat.success" depends="vars">
        <loadfile srcfile="${cvs.update.timestamp}" property="cvs.update.timestamp.value" />
        <copy includeemptydirs="true" overwrite="true"
              file="demo/root/index.success.html"
              tofile="${runtime.env}/context-root-success/index.html" filtering="true">
            <filterset>
                <filter token="cvs.update.timestamp.value" value="${cvs.update.timestamp.value}"/>
                <filter token="code.build.timestamp.value" value="${deploy.time}" />
            </filterset>        
        </copy>
        <ant antfile="tomcat.xml" dir="." target="start.tomcat">
            <property name="catalina.home" location="${runtime.env}" />
        </ant>
    </target>

    <!-- 
      ## Copies necessary files and starts tomcat again.
      -->
    <target name="start.tomcat.failure" depends="vars">
        <loadfile srcfile="${cvs.update.timestamp}" property="cvs.update.timestamp.value" />
        <copy includeemptydirs="true" overwrite="true"
              file="demo/root/index.failure.html"
              tofile="${runtime.env}/context-root-failure/index.html" filtering="true">
            <filterset>
                <filter token="cvs.update.timestamp.value" value="${cvs.update.timestamp.value}"/>
                <filter token="code.build.timestamp.value" value="${deploy.time}" />
            </filterset>        
        </copy>
        <ant antfile="tomcat.xml" dir="." target="start.tomcat">
            <property name="catalina.home" location="${runtime.env}" />
            <property name="catalina.config" location="${runtime.env}/conf/server.buildfailure.xml" />
        </ant>
    </target>
    

    <!-- 
      ## Customize the controller application.
      -->
    <target name="customize.controller">
        <!-- Customize the controller application -->
        <property name="controller.name" value="carrot2-remote-controller" />
        <property name="controller.war" location="${build.dir}/${controller.name}.war" />
        
        <available file="${controller.war}" property="tmp:controller.available" type="file" value="true" />
        <fail message="Panic: controller WAR not found in: ${controller.war}" unless="tmp:controller.available" />

        <!-- clean any previously unpacked stuff -->
        <delete dir="${build.dir}/${controller.name}" failonerror="false" includeemptydirs="true" quiet="true" />        

        <!-- unzip it first. -->
        <mkdir dir="${build.dir}/${controller.name}" />
        <unzip dest="${build.dir}/${controller.name}" src="${controller.war}" overwrite="true" />
        
        <!-- now modify it -->
        <delete quiet="true">
            <fileset dir="${build.dir}/${controller.name}">
                <include name="WEB-INF/guards/*" />
            </fileset>
        </delete>
        <copy filtering="false" overwrite="true" todir="${build.dir}/${controller.name}">
            <fileset dir="demo/controller" includes="**/*" />
        </copy>

        <!-- zip it up again -->
        <zip compress="true" update="true" zipfile="${controller.war}">
            <fileset dir="${build.dir}/${controller.name}" includes="**/*" />
        </zip>
        
        <!-- clean the unpacked stuff -->
        <delete dir="${build.dir}/${controller.name}" failonerror="false" includeemptydirs="true" quiet="true" />        
    </target>
    
  <!-- ##################################### -->
  <!-- ### {{{ HELP ON THIS FILE         ### -->
  <!-- ##################################### -->
    <target name="help" description="Displays help on available targets.">
    <echo>
    This ANT script is used to deploy Carrot2 Web site.
    It is for internal use only and contains no public targets.
    </echo>
    </target>
  <!-- }}} -->

</project>

