// Add test count summaries.
allprojects {
  tasks.withType(Test) { task ->
    afterSuite { desc, result ->
      if (!desc.parent) {
        if (result.testCount > 0) {
          def components = [
              "test(s)"   : result.testCount,
              "failure(s)": result.failedTestCount,
              "skipped"   : result.skippedTestCount
          ].findAll { k, v -> v > 0 }.collect { k, v -> "$v $k" }.join(", ")

          logger.lifecycle("${task.path} (${result.resultType}): ${components}")
        }
      }
    }
  }
}

// Collect test execution stats.
def allTests = []

allprojects {
  tasks.withType(Test) { task ->
    def tmpDir = file("${project.buildDir}/tmp/java-temp")

    systemProperty("java.io.tmpdir", tmpDir)

    doFirst {
      tmpDir.mkdirs()
    }

    afterTest { desc, result ->
      def duration = (result.getEndTime() - result.getStartTime())

      allTests << [
          name    : "${desc.className.replaceAll('.+\\.', "")}.${desc.name} (${project.name})",
          duration: duration
      ]
    }
  }
}

gradle.buildFinished {
  if (allTests) {
    logger.lifecycle("The slowest tests (exceeding 500 ms) during this run:\n  " + allTests
        .sort {a, b -> b.duration.compareTo(a.duration) }
        .take(10)
        .findAll { e -> e.duration >= 500 }
        .collect {e -> String.format(Locale.ROOT, "%5.2fs %s", e.duration / 1000d, e.name) }
        .join("\n  "))
  }
}
