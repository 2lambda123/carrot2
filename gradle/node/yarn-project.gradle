
apply plugin: 'base'
apply plugin: 'com.github.node-gradle.node'

configurations {
  it.default.extendsFrom archives
}

// Change the default build directory for gradle so that
// it doesn't conflict with npm builds (webpack).
buildDir = file("build-gradle")

ext {
  srclayout = "webpack"
  yarnEnv = [:]
}

node {
  version = "${versions.node}"
  yarnVersion = "${versions.yarn}"
  download = true
}

task touchbuild {
  doFirst {
    project.mkdir buildDir
  }
}

afterEvaluate {
  if (project.srclayout == 'gatsby') {
    ext.jsSources = fileTree('src') + fileTree('static')
    // Gatsby has a non-configurable output folder, sigh.
    // https://github.com/gatsbyjs/gatsby/issues/1878
    ext.jsBuildDir = file("public")
  } else {
    ext.jsSources = fileTree('src') + fileTree('public')
    ext.jsBuildDir = file("build")
  }
}

task yarnInstall(type: YarnTask) {
  group 'build'

  inputs.file('package.json')
  inputs.file('yarn.lock')

  outputs.upToDateWhen {
    return project.file('node_modules').exists()
  }
  outputs.file('node_modules/.yarn-integrity')

  args = [
    'install',
    '--frozen-lockfile'
  ]
}

task foo {
  doFirst {
    System.getenv().each {k, v ->
      if (k.startsWith("REACT_APP_")) {
        logger.warn("Using environment variable for yarn ({}={})", k, v)
      }
    }
  }
}

task yarnBuild(type: YarnTask) {
  group 'build'
  dependsOn yarnInstall

  afterEvaluate {
    inputs.file('package.json')
    inputs.file('yarn.lock')
    inputs.files { jsSources }


    project.properties.each { k,v ->
      if (k.startsWith("REACT_APP_")) {
        yarnEnv.put(k, v)
      }
    }

    System.getenv().each {k, v ->
      if (k.startsWith("REACT_APP_")) {
        yarnEnv.put(k, v)
      }
    }

    inputs.properties (yarnEnv.findAll {
      it.key != "REACT_APP_BUILD_DATE" &&
          it.key != "REACT_APP_GIT_REV"
    })
  }

  outputs.dir { jsBuildDir }

  // Set the environment once the task runs, otherwise variables trigger task
  // changed events and rebuilds.
  doFirst {
    environment = yarnEnv

    yarnEnv.each { k,v ->
      logger.lifecycle("Using yarn env variable $k=$v")
    }
  }

  args = [
    'build'
  ]
}

task fastBuild {
  doFirst {
    logger.warn("Omitting full yarn build in fast build: ${project.path}")
  }
}

artifacts {
  archives provider { jsBuildDir }, {
    if (project.hasProperty("fast")) {
      builtBy fastBuild
    } else {
      builtBy yarnBuild
    }
  }
}

clean {
  doLast {
    if (project.srclayout == 'gatsby') {
      project.delete project.files(".cache", "public")
      logger.lifecycle("Cleaned .cache/public on ${project.path}, remaining:\n  ${projectDir.list().join('\n  ')}")
    }
  }
}

task cleanNodeDirs(type: Delete) {
  delete ".gradle"
  delete "node_modules"
}

cleanall.dependsOn cleanNodeDirs

assemble.dependsOn configurations.archives
