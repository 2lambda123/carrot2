
def dynamicSignatures = { configuration ->
  def deps = configuration.resolvedConfiguration.resolvedArtifacts
      .collect { a -> a.moduleVersion.id }
      .collect { id -> "${id.group}-${id.name}" }
      .sort()

  deps.each { dep ->
    def signaturesFile = rootProject.file("etc/forbidden-apis/${dep}.txt")
    if (signaturesFile.exists()) {
      signaturesFiles += files(signaturesFile)
    }
  }
}

allprojects {
  def matching = tasks.matching { it.name == "forbiddenApisMain" }
  check.dependsOn matching
  matching.all { task ->
    bundledSignatures += [
        'jdk-unsafe',
        'jdk-deprecated',
        'jdk-internal',
        'jdk-non-portable',
        'jdk-system-out',
    ]

    doFirst dynamicSignatures.curry(configurations.compileClasspath)
  }
}

allprojects {
  def matching = tasks.matching { it.name == "forbiddenApisTest" }
  check.dependsOn matching
  matching.all {
    bundledSignatures += [
        'jdk-unsafe',
        'jdk-deprecated',
        'jdk-internal',
        'jdk-non-portable',
    ]

    doFirst dynamicSignatures.curry(configurations.testCompileClasspath)
  }
}