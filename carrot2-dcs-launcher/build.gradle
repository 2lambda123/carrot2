import org.apache.tools.ant.filters.*

apply plugin: 'java'

project.evaluationDependsOn(":carrot2-dcs-service")
project.evaluationDependsOn(":carrot2-dcs-root")

sourceSets {
  integTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integ-test/java')
    }
    resources.srcDir file('src/integ-test/resources')
  }
}

configurations {
  integTestImplementation.extendsFrom testImplementation
  integTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
  implementation "com.beust:jcommander:1.72"

  implementation "org.eclipse.jetty:jetty-server:${versions.jetty}"
  implementation "org.eclipse.jetty:jetty-webapp:${versions.jetty}"

  implementation "org.apache.logging.log4j:log4j-core:${versions.log4j2}"
  implementation "org.apache.logging.log4j:log4j-slf4j-impl:${versions.log4j2}"

  // Fairly neat agent for I/O leak detection.
  // testCompile "org.kohsuke:file-leak-detector:1.13"
}

jar {
  manifest {
    attributes("Main-Class": "org.carrot2.dcs.Launcher")
    attributes("Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' '))
  }
}

task collectDependencies(type: Sync) {
  from configurations.runtimeClasspath
  from jar

  into "$buildDir/${project.name}/lib"
}

task collectScripts(type: Sync) {
  from files('src/main/assembly') {
    filteringCharset = 'UTF-8'
    filter(ReplaceTokens, tokens: replaceTokens)
  }
  from legal

  into "$buildDir/${project.name}"
  preserve {
    include 'lib/'
  }
}

task collectCtxService(type: Sync) {
  dependsOn ':carrot2-dcs-service:war'
  from zipTree(project(":carrot2-dcs-service").war.archiveFile)

  into "$buildDir/${project.name}/web/service"
}

task collectCtxRoot(type: Sync) {
  dependsOn ':carrot2-dcs-root:war'
  from zipTree(project(":carrot2-dcs-root").war.archiveFile)

  into "$buildDir/${project.name}/web/root"
}

task integTest(type: Test) {
  group "verification"
  dependsOn assemble, ":carrot2-dcs-service:test"
  testClassesDirs = sourceSets.integTest.output.classesDirs
  classpath = sourceSets.integTest.runtimeClasspath

  outputs.upToDateWhen { false }
}

integTest.mustRunAfter test
check.dependsOn integTest

assemble.dependsOn(
        collectScripts,
        collectDependencies,
        collectCtxService,
        collectCtxRoot)
