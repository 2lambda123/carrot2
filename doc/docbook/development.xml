<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN"
                 "http://www.docbook.org/xml/5.0/dtd/docbook.dtd" [
  <!ENTITY % local SYSTEM "local-entities.ent">
  <!ENTITY % custom SYSTEM "custom-entities.ent">
  %local;
  %custom;
]>
<chapter xml:id="chapter.development" xmlns="http://docbook.org/ns/docbook" version="5.0">
  <title>&C2; Development</title>
  <subtitle>Contributing to &C2;</subtitle>

  <para>
    This chapter contains information for &C2; developers.
  </para>

  <section xml:id="section.release">
    <title>Stable release procedure</title>
    
    <para>
      <important>
        <para>
        The release procedure needs to be revised for git!
        </para>
      </important>
    </para>
  </section>
  
  <section xml:id="section.versioning">
    <title>Versioning scheme</title>

    <para>
      &C2; uses version identifiers consisting of three, dot-separated numbers: 
      <varname>product-line</varname>.<varname>major</varname>.<varname>minor</varname>. This scheme
      is modelled after Maven's POM versions and has the following interpretation:
    </para>

    <variablelist>
      <varlistentry>
        <term>product-line</term>
        <listitem><para>Indicates long-term product line identifier. This number
        will not change frequently as it reflects major changes in the internal
        architecture or shipped software components. Reading release notes is 
        a must, the internal programming interfaces very likely changed significantly.</para></listitem>
      </varlistentry>
  
      <varlistentry>
        <term>major</term>
        <listitem><para>Major revision number changes indicate addition of significant new 
        features, performance optimizations or new front-end software components added to &C2;.
        Reading release notes is highly recommended because programming interfaces may change
        slightly from major to major revision.</para></listitem>
      </varlistentry>
      
      <varlistentry>
        <term>minor</term>
        <listitem><para>Minor revision numbers are reserved for shipped product updates and
        bug fixes. These may include critical bug fixes as well as patches
        increasing performance, but not changing the programming interfaces. Reading
        release notes is recommended, but a drop-in upgrade should work without
        any extra work.</para></listitem>
      </varlistentry>
    </variablelist>

    <para>
      The git repository is organized so that the <varname>master</varname> branch tracks the development
      of the next <emphasis>major revision</emphasis>. Bugfix branches track minor revisions
      of already shipped versions. A tag is created for each shipped version. Branch
      and tag names follow the naming conventions below.
    </para>

    <variablelist>
      <varlistentry>
        <term>master</term>
        <listitem><para>The master branch is equivalent to the next major software revision
        being developed and is not numbered explicitly, but corresponds to
        branch <varname>vX.Y.0</varname>, where <varname>Y</varname> is
        the next major revision to be shipped. It is possible to create a minor release
        off the trunk directly if the commit log only includes bug fixes.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term>bugfix/X.Y.Z</term>
        <listitem><para>A branch named <varname>bugfix/X.Y.z</varname> tracks the product shipped as
        <varname>X.Y.z</varname>, where the <varname>z</varname> component is the next 
        minor release to be shipped from this branch. Once shipped, a tag should
        be created.
        </para></listitem>
      </varlistentry>

      <varlistentry>
        <term>release/X.Y.Z</term>
        <listitem><para>A tag named <varname>release/X.Y.Z</varname> should be created for
        exactly that development branch at the time of shipment.</para></listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section xml:id="section.qa">
    <title>QA check list</title>
    
    <para>
      This a very quick quality assurance check list to run through before stable 
      releases. This list also serves as some guide line for further automation
      of acceptance tests.
    </para>
    
    <note>
      <para>
        Note that this list does not contain many checks for the &WA;, &DCS; and &JA;
        as these are fairly well tested during builds (webtests, smoke-tests).
      </para>
    </note>
    
    <orderedlist>
      <listitem>
        <para>
          For each supported platform you can test, check that &DCW;:
          
          <orderedlist spacing="compact">
            <listitem>
              <para>launches without errors in the error log</para>
            </listitem>
            
            <listitem>
              <para>executes and cluters a remote search query without errors</para>
            </listitem>
            
            <listitem>
              <para>
                executes and clusters a Lucene query without errors (we've had a bug
                that caused the Lucene directory attribute editor to disappear, 
                hence this step).
              </para>
            </listitem>
            
            <listitem>
              <para>can edit a clustering algorithm's attribute</para>
            </listitem>
            
            <listitem>
              <para>shows both cluster visualizations</para>
            </listitem>
            
            <listitem>
              <para>executes clustering algorithm benchmarks</para>
            </listitem>
          </orderedlist>
        </para>
      </listitem>
      
      <listitem>
        <para>
          Check that a the &DCS; starts up correctly using command line on Windows and 
          Linux. More acceptance tests are performed during builds (but starting &DCS; 
          using the WAR file instead of command line).
        </para>
      </listitem>
    </orderedlist>
  </section>
</chapter>
