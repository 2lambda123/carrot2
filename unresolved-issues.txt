* hardcoded, long attribute keys (class name + field name, hardcoded short
  string). Maybe we could have multiple keys (not a problem to implement)

* support for specifying attribute-set-id at runtime (for each component?)
  rather than the actual attributes

* components other than source and algorithm, sitting between the two, e.g.
  - spellchecker
  - field merger

* what if we wanted to provide different set of init attributes per a
  combination of components?

* inheritance of attribute fields
  EtoolsDS inherits from XmlDS. We'd need to set a specific XSLT there, but
  the XSLT will still be editable, which will break the component...
  Solution: refactor common functionality of XmlDS to a non-component class
  (whithout attributes) and embed it in component classes (with attributes)

* org.carrot2.util.resource.ResourceUtilsFactory.getDefaultResourceUtils()
  Could we have a static instance there?

* Preprocessing

	* different sizes of arrays in the context (all tokens, all words, all stems, all phrases)
	* dependencies between tasks? (phrases need stems?)
	* replace "stopwords" with the concept of "word flagging"? possilble flag types:
	  * POS (from simple files, elsewhere)
	  * acronym (capitalized)
	  * stop word override
	* algorithms will have parameters based on word flags (e.g. make all prepositions stop words)
	* question: word flags vs. stemming? -- to add 'gets' and 'get' -- do we need to specify both or only one (stemming)
	* problem: do we want to consider synonyms in any future?


	Attributes

	* (wb) current language
	* (wb) add extra words with their flags (lexical resource editor!)
	  - entries provided by hand
	  - pointers to files?
	  - init/request time?
	* (code) add extra custom word flags processors (e.g. external POS tagger adapter)
