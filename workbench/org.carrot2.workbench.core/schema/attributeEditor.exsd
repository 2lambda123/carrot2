<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.carrot2.workbench.editors">
<annotation>
      <appInfo>
         <meta.schema plugin="org.carrot2.workbench.editors" id="attributeEditor" name="Attribute Editor"/>
      </appInfo>
      <documentation>
         Extention for defining attribute editors. Those editors will be used to create Attributes view.&lt;br&gt;&lt;br&gt;
When looking for appropriate editor for given attribute, editors will be looked for in this order:
&lt;ol&gt;
&lt;li&gt;dedicatedEditor for this attribute,
&lt;li&gt;if attribute has constraints: typeEditor with matching attributeClass and matching all constraints with allAtOnce set to true,
&lt;li&gt;if attribute has constraints: typeEditor with matching attributeClass and at least one matching constraint, where constraints has allAtOnce set to false,
&lt;li&gt;typeEditor with matching attributeClass.
&lt;/ol&gt;
First one found is used.
      </documentation>
   </annotation>

   <element name="extension"> 
      <complexType>
         <sequence>
            <element ref="typeEditor" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="dedicatedEditor" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="typeEditor">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="attributeClass"/>
         </appInfo>
         <documentation>
            Used to add editor, that can be used for all attributes of a given type having given constraints.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="constraints" minOccurs="0" maxOccurs="1"/>
         </sequence>
         <attribute name="attributeClass" type="string" use="required">
            <annotation>
               <documentation>
                  Class or ancestor of an attribute.&lt;br&gt;
Must return true for &lt;code&gt;AttributeDescriptor.type.isInstance(attributeClass)&lt;/code&gt;.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  Class that implement &lt;code&gt;org.carrot2.workbench.editors.IAttributeEditor&lt;/code&gt;.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn=":org.carrot2.workbench.editors.IAttributeEditor"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="constraints">
      <annotation>
         <documentation>
            List of constraints that this editor supports.&lt;br&gt;
When looking for an editor for an attribute that has constraints, editor with matching attributeClass, but with no constraints, will be chosen &lt;b&gt;only&lt;/b&gt; if there is no editor with matching attributeClass and matching constraints.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="constraint" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="allAtOnce" type="boolean" use="default" value="false">
            <annotation>
               <documentation>
                  If true, than attribute must have all specified constraints. Otherwise, only one of the constraints is enough.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="constraint">
      <complexType>
         <attribute name="constraintClass" type="string" use="required">
            <annotation>
               <documentation>
                  Class of a constraint. Must be annotated with &lt;code&gt;@IsConstraint&lt;/code&gt;.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn=":java.lang.annotation.Annotation"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="dedicatedEditor">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="attributeId"/>
         </appInfo>
         <documentation>
            Used to add editor that is dedicated for specific attribute in specific component (source or algorithm).
         </documentation>
      </annotation>
      <complexType>
         <attribute name="sourceId" type="string">
            <annotation>
               <documentation>
                  Full Id of extension for &lt;code&gt;org.carrot2.core.algorithm&lt;/code&gt; extension point.&lt;br&gt;
&lt;u&gt;Cannot be used together with algorithmId!&lt;/u&gt;
               </documentation>
            </annotation>
         </attribute>
         <attribute name="algorithmId" type="string">
            <annotation>
               <documentation>
                  Full Id of extension for &lt;code&gt;org.carrot2.core.source&lt;/code&gt; extension point.&lt;br&gt;
&lt;u&gt;Cannot be used together with sourceId!&lt;/u&gt;
               </documentation>
            </annotation>
         </attribute>
         <attribute name="attributeId" type="string" use="required">
            <annotation>
               <documentation>
                  Identifier of attribute.
Value from the editor will be stored with the key &lt;code&gt;AttributeUtils.getKey(ComponentSample.class, attributeId)&lt;/code&gt;
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn=":org.carrot2.workbench.editors.IAttributeEditor"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         1.0.0
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         
      </documentation>
   </annotation>

</schema>
