<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix PUBLIC 
    "-//Dawid Weiss//DTD DocBook V3.1-Based Extension for XML and graphics inclusion//EN" 
    "carrot-docbook-extensions.dtd">
  
<section id="sect:mime:x-carrot-clustering-plain-linguistic">
    <title>Embedded linguistic information: <computeroutput>application/x-carrot-clustering-plain-linguistic</computeroutput></title>

    <para>        
    It is a frequent practice in Information Retrieval to conflate inflected word forms prior
    to any computing done on the text. For example, in English,
    <wordasword>consisted</wordasword> would conflate to <wordasword>consist</wordasword>. 
    This technique is usually called <glossterm>stemming</glossterm>, as it is supposed to
    return a stem of a word (in fact, most of the methods are only approximate and thus return 
    invalid stems sometimes).
    </para>
    <para>
    In our application to search results clustering, certain linguistic information
    can be embedded in the data stream. This way, linguistic preprocessing becomes
    an optional stage &mdash; clustering components may use it, or ignore it.
    </para>

    <important>
    <para>
    This is an example of extending plain search results with linguistic information. 
    In reality, the linguistic tags will be propagated to the output groups data stream, because
    of the assumption that all unrecognized tags are supposed to be propagated further down the
    processing chain.
    </para>
    </important>

    <para>
    Information about stems is interleaved with the regular <acronym>XML</acronym> data,
    as shown in <xref linkend="listing:example:x-carrot-clustering-plain-linguistic" />.
    Terms are represented
    by sequences of letters (and only letters). If such a sequence is recognized by the stemmer
    as a valid term,
    a new tag (<sgmltag>&lt;l/&gt;</sgmltag>) is pasted <emphasis>before</emphasis> any <acronym>XML</acronym>
    element the term occurrs in. The linguistic tag consists of several attributes,
    most of them optional: 
    </para>

    <table frame="topbot" rowsep="0" colsep="0">
        <title>Attributes of the term linguistic information tag <sgmltag>&lt;l/&gt;</sgmltag></title>
        <tgroup cols="3" align="left">
            <colspec colname="Attribute" />
            <colspec colname="Value type" />
            <colspec colname="Presence" />
            <colspec colname="Description" />
            <thead>
                <row>
                    <entry align="center">Attribute</entry>
                    <entry align="center">Type</entry>
                    <entry align="center">Presence</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><sgmltag>t</sgmltag></entry>
                    <entry><type>String</type></entry>
                    <entry>Always</entry>
                    <entry>The term itself, as it occurs in a further part of the <acronym>XML</acronym> document</entry>
                </row>
                <row>
                    <entry><sgmltag>s</sgmltag></entry>
                    <entry><type>String</type></entry>
                    <entry>Optional</entry>
                    <entry>Stem of the term <sgmltag>t</sgmltag></entry>
                </row>
                <row>
                    <entry><sgmltag>sw</sgmltag></entry>
                    <entry>empty</entry>
                    <entry>Optional</entry>
                    <entry>Indicates whether the term is a stop-word. Stop words should usually
                           be ignored in the input text, because they carry no relevant meaning.</entry>
                </row>
            </tbody>
        </tgroup>
    </table>
    
    <simplesect>
        <title>&xml; schema</title>
        
        <example id="listing:schema:x-carrot-clustering-plain-linguistic">
        <title>&xml; schema for the plain search results format extended with linguistic tags</title>
        <programlisting><![CDATA[@insert-file.x-carrot-clustering-plain-linguistic.schema@]]></programlisting>
        </example>

    </simplesect>

    <simplesect>
        <title>A valid input example</title>
        
        <example id="listing:example:x-carrot-clustering-plain-linguistic">
        <title>An example of a valid search results file with linguistic information</title>
        <programlisting><![CDATA[@insert-file.x-carrot-clustering-plain-linguistic.example@]]></programlisting>
        </example>

    </simplesect>

</section>
