<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet 
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"
    xmlns:jscriptext="http://www.dawidweiss.com/xslt-extensions/com.dawidweiss.carrot.util.EscapeString"
>
<xsl:output method="html" indent="no" encoding="UTF-8" />

<!-- DO NOT ATTEMPT TO SET THESE PARAMETERS - they are set by the XSLT output component -->
<xsl:param    name="base.url"      select="''" />

<!-- Edit the following as needed (use process scripting capabilities to pass values of these
     parameters, do not edit this file directly) -->

<xsl:param    name="dtree.css"                              select="'compact'" />
<xsl:param    name="iconset"                                select="'explorer'" />

<xsl:param    name="param.image.base"                       select="concat($base.url,'/dtree/img/', $iconset)" />
<xsl:param    name="param.image.width"                      select="'12'" />
<xsl:param    name="param.image.height"                     select="'12'" />

<xsl:param    name="param.output.terminal.nodes"            select="'true'" />
<xsl:param    name="param.max.open.level"                   select="'3'" />
<xsl:param    name="param.max.subgroup.snippets.included"   select="'3'" />
<xsl:param    name="param.no.terminal.groups.expansion"     select="'true'" />

<!-- allowed values: 'ORDER_GROUP_DECLARATION_ORDER', 'ORDER_DOCUMENTS_ORDER', 'ORDER_SCORE_ATTRIBUTE' -->
<xsl:param    name="param.snippets.sorting.type"            select="'ORDER_GROUP_DECLARATION_ORDER'" />
<xsl:param    name="param.score.attribute.name"             select="'score'" />    

<!-- Google Analytics account -->
<xsl:param    name="googleanalytics"                        select="''" />    


<!-- DO NOT ATTEMPT TO SET THESE VARIABLES -->

<xsl:variable name="dtree.url"     select="concat($base.url,'/dtree')" />
<xsl:variable name="dtree.css.url" select="concat($dtree.url,'/css/',$dtree.css)" />

<!-- Converts snippet list from Carrot2 format to HTML -->

<xsl:template match="/">
    <xsl:choose>
        <xsl:when test="function-available('jscriptext:escape-string')">
            <xsl:apply-templates select="searchresult" />
        </xsl:when>
        <xsl:otherwise>
            ERROR: This stylesheet requires that extension function 'escape-string' is available.
            Please make sure your processor supports extensions and include an implementation of
            this function, otherwise it is not going to work. 
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>


<xsl:template match="/searchresult">
	<xsl:text disable-output-escaping="yes">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</xsl:text>
    <html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

        <link rel="stylesheet" type="text/css">
            <xsl:attribute name="href"><xsl:value-of select="concat($dtree.css.url,'.css')"/></xsl:attribute>
        </link>
        
        <xsl:text disable-output-escaping="yes"><![CDATA[
        <script type="text/javascript" language="JavaScript" src="]]></xsl:text><xsl:value-of select="concat($dtree.url,'/js/browser-detection.js')" />
        <xsl:text disable-output-escaping="yes"><![CDATA["></script>]]></xsl:text>

        
        <script type="text/javascript" language="JavaScript">
            <xsl:text disable-output-escaping="yes"><![CDATA[
            // Load emulation layer for gecko.
            if (navigator.family == "gecko")
            {
                document.write('<link rel="stylesheet" type="text/css" href="]]></xsl:text><xsl:value-of select="concat($dtree.css.url,'-gecko.css')" />
                <xsl:text disable-output-escaping="yes"><![CDATA["></link>');
                document.write('<script type="text/javascript" language="JavaScript" src="]]></xsl:text><xsl:value-of select="concat($dtree.url,'/js/gecko-specific.js')" />

            <xsl:text disable-output-escaping="yes"><![CDATA["></sc' + 'ript>');
            }
            else
            // if (navigator.family == "ie4" && navigator.version >=5 && navigator.OS != "mac")
            {
                document.write('<script type="text/javascript" language="JavaScript" src="]]></xsl:text><xsl:value-of select="concat($dtree.url,'/js/explorer-specific.js')" />

            <xsl:text disable-output-escaping="yes"><![CDATA["></sc' + 'ript>');
            }]]></xsl:text>
        </script>

        <script type="text/javascript" language="JavaScript">
            <xsl:attribute name="src"><xsl:value-of select="concat($dtree.url,'/js/tree-config.js')"/></xsl:attribute>
        </script>

        <script>
                // Customize output.
                OUTPUT_TERMINAL_NODES        = <xsl:value-of select="$param.output.terminal.nodes" />;
                MAX_OPEN_LEVEL               = <xsl:value-of select="$param.max.open.level" />;
                MAX_SUBGROUP_SNIPPET_DISPLAY = <xsl:value-of select="$param.max.subgroup.snippets.included" />;
                NO_TERMINAL_GROUPS_EXPANSION = <xsl:value-of select="$param.no.terminal.groups.expansion" />;
                ORDER_TYPE                   = <xsl:value-of select="$param.snippets.sorting.type" />;
                DEFAULT_ALL_ROOTS_TITLE      = "All groups";
        </script>
        
        <script type="text/javascript" language="JavaScript">
            <xsl:attribute name="src"><xsl:value-of select="concat($dtree.url,'/js/tree-common.js')"/></xsl:attribute>
        </script>
        <script type="text/javascript" language="JavaScript">
            <xsl:attribute name="src"><xsl:value-of select="concat($dtree.url,'/js/tree-bothaxes.js')"/></xsl:attribute>
        </script>
    </head>

    <body>
        <table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0">
            <tr>
                <td align="left" valign="top" height="10" 
                    style="width: 250px; border-bottom: 1px solid #8B95B0; border-top: 1px solid #8B95B0; background-color: #E4EBFD; border-right: solid 1px gray; font-size: 9px; color: black; padding: 1px; ">
                    <a class="clickable" onMouseOver="javascript:status='Back to top group'" onMouseOut="javascript:status=''" onClick="javascript:goToGroup(&quot;__SYNTHETIC_ROOT__&quot;);">
                        <img align="absmiddle" border="0" src="{concat( $param.image.base,'/icons/topgroup.gif' )}" /></a>

                    <nobr> Sort:
                        [<a class="clickable" onMouseOver="javascript:status='Sort according to original results'" onMouseOut="javascript:status=''" onClick="javascript:ORDER_TYPE = ORDER_DOCUMENTS_ORDER; showDocumentsFromGroup(currentRootNodeId);">flat</a>]
                        [<a class="clickable" onMouseOver="javascript:status='Sort according to original results'" onMouseOut="javascript:status=''" onClick="javascript:ORDER_TYPE = ORDER_GROUP_DECLARATION_ORDER; showDocumentsFromGroup(currentRootNodeId);">group</a>]
                        [<a class="clickable" onMouseOver="javascript:status='Sort according to original results'" onMouseOut="javascript:status=''" onClick="javascript:ORDER_TYPE = ORDER_SCORE_ATTRIBUTE; showDocumentsFromGroup(currentRootNodeId);">score</a>]</nobr>
                </td>
            </tr>
            <tr>
                <td align="left" valign="top" style="width: 250px; padding-right: 5px; border-right: dotted 1px gray;">
                <!-- This is a placeholder DIV section for the groups graph visualization -->
                <div id="treePlaceholder"></div>
                <!-- This enforces minimum width of this column. A hack, but works on all browsers, and the CSS property doesn't -->
                <img src="{concat($base.url,'/dtree/img/empty.gif')}" width="250" height="1" alt="" />
                </td>
                <td align="left" valign="top" rowspan="2">
                <!-- This is a placeholder DIV section for a list of snippets from the selected group
                     (and subgroups) -->
                <div id="resultsPlaceholder" style="padding-left: 1em; "></div>
                </td>
            </tr>
        </table>

        <script>
                // Initialize graphics
                preloadImages(&quot;<xsl:value-of select="$param.image.base" />&quot;, 
                              <xsl:value-of select="$param.image.width" />,
                              <xsl:value-of select="$param.image.height" />);
                
                // Output terminal nodes.
                <xsl:for-each select="document">
                    TNode(
                        &quot;<xsl:value-of select="@id" />&quot;,
                        &quot;<xsl:value-of select="jscriptext:escape-string(normalize-space(title))" />&quot;,
                        &quot;<xsl:value-of select="jscriptext:escape-string(normalize-space(url))" />&quot;,
                        &quot;<xsl:value-of select="jscriptext:escape-string(normalize-space(snippet))" />&quot;);
                </xsl:for-each>

                // Output internal nodes (groups)
                <xsl:for-each select="group">
                    INodeRoot(
                        &quot;<xsl:value-of select="generate-id(.)" />&quot;,
                        &quot;<xsl:apply-templates select="title/phrase" />&quot; );
                </xsl:for-each>

                // Output internal nodes
                <xsl:for-each select="group//group">
                    INode(
                        &quot;<xsl:value-of select="generate-id(.)" />&quot;,
                        &quot;<xsl:apply-templates select="title/phrase" />&quot; );
                </xsl:for-each>
                
                // Output encoded edges table.
                <xsl:for-each select="//group">
                    <xsl:if test="group">
                        decodeEdges(&quot;<xsl:value-of select="generate-id(.)" />;<xsl:for-each select="group">
                            <xsl:if test="position() &gt; 1">,</xsl:if><xsl:value-of select="generate-id(.)"/>
                        </xsl:for-each>&quot;);
                    </xsl:if>
                    
                    <xsl:if test="document">
                        <xsl:choose>
                            <xsl:when test="$param.snippets.sorting.type = 'ORDER_SCORE_ATTRIBUTE'">
                                decodeScoredEdges(&quot;<xsl:value-of select="generate-id(.)" />;<xsl:for-each select="document">
                                    <xsl:if test="position() &gt; 1">,</xsl:if><xsl:value-of select="@refid"/>,<xsl:value-of select="attribute::*[name() = $param.score.attribute.name]" />
                                </xsl:for-each>&quot;);
                            </xsl:when>
                            <xsl:otherwise>
                                decodeEdges(&quot;<xsl:value-of select="generate-id(.)" />;<xsl:for-each select="document">
                                    <xsl:if test="position() &gt; 1">,</xsl:if><xsl:value-of select="@refid"/>
                                </xsl:for-each>&quot;);
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:if>
                </xsl:for-each>

                // Go to the top group.
                goToGroup(&quot;__SYNTHETIC_ROOT__&quot;);
        </script>
        
        <xsl:if test="$googleanalytics != ''">
			<script src="http://www.google-analytics.com/urchin.js" type="text/javascript" />
			<script type="text/javascript">
			_uacct = "<xsl:value-of select="$googleanalytics" />";
			urchinTracker();
			</script>
        </xsl:if>
    </body>
</html>
<xsl:comment>Test comment, do not remove: *PAGE_RENDERED_CORRECTLY* </xsl:comment>
</xsl:template>

<xsl:template match="title/phrase">
    <xsl:if test='position() &gt; 1'>, </xsl:if><xsl:value-of select="jscriptext:escape-string(normalize-space(.))" />    
</xsl:template>

</xsl:stylesheet>