import org.apache.tools.ant.filters.*
import org.gradle.util.GradleVersion

String minimumGradleVersion = "5.1.1"
if (GradleVersion.current() < GradleVersion.version(minimumGradleVersion)) {
    throw new GradleException("Gradle ${minimumGradleVersion}+ is required (use local ./gradlew for wrapper).")
}

allprojects {
  apply plugin: 'idea'
  version = '4.0'

  repositories {
    mavenCentral()
  }

  idea {
    module {
      outputDir file('build/idea/classes/main')
      testOutputDir file('build/idea/classes/test')
      downloadSources = true
    }
  }

  gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
      options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
  }
}

ext {
  legal = files('carrot2.LICENSE')
  replaceTokens = [
    "version":      project.version
  ]
}

project("carrot2-core") {
  apply plugin: 'java-library'

  configurations {
    jflex
  }

  dependencies {
    api "org.slf4j:slf4j-api:1.7.13"
    implementation "com.carrotsearch:hppc:0.8.1"
    jflex "de.jflex:jflex:1.5.1"
  }

  task jflex(type: JavaExec) {
    description = "Regenerate JFlex Java scanners."
    group       = "Build"

    classpath {
      configurations.jflex
    }
    main = "jflex.Main"
    args "-nobak", "--noinputstreamctor"
    args "-d", file('src/main/java/org/carrot2/language')
    args file('src/main/jflex/org/carrot2/language/ExtendedWhitespaceTokenizerImpl.jflex')
  }
}

configure(subprojects.findAll {[
        "carrot2-core"
].contains(it.name)}) {
  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  compileJava.options.encoding = "UTF-8"
  compileTestJava.options.encoding = "UTF-8"

  dependencies {
    testImplementation "com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.7.2"
    testImplementation "junit:junit:4.12"
    testImplementation "org.assertj:assertj-core:3.11.1"
    testImplementation "org.slf4j:slf4j-simple:1.7.13"
  }
}
