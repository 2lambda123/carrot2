
plugins {
  id 'com.diffplug.gradle.spotless' version "3.23.0" apply false
  id "com.github.ben-manes.versions" version "0.21.0"
  id 'com.moowork.node' version '1.3.1' apply false
}

apply from: file('gradle/min-gradle-version.gradle')
apply from: file('gradle/loadProperties.gradle')
apply from: file('gradle/gitinfo.gradle')
apply from: file('gradle/buildinfo.gradle')

def currentVersion = '4.0'

def publishedProjects = [
  ":core"
]

ext {
  versions = loadProperties(file('dependencies.versions'))
  gitRev = gitStatus.id

  legal = files('carrot2.LICENSE')
  licenseHeader = file('etc/license-header.txt')

  replaceTokens = [
    'version': currentVersion,
    'gitRev': gitRev,
    'buildDate': buildDate,
    'buildDateTrimmed': buildDateTrimmed
  ]

  mavenBuildRepo = "${rootProject.buildDir}/maven"
  isIdea = System.getProperty("idea.active") != null || gradle.startParameter.taskNames.contains('idea') || gradle.startParameter.taskNames.contains('cleanIdea')
}

allprojects {
  apply plugin: 'idea'

  version = currentVersion

  repositories {
    mavenCentral()
  }

  configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
      if (details.requested.name == 'slf4j-api') {
        details.useTarget "org.slf4j:slf4j-api:${versions.slf4j}"
        details.because "Force-use slf4j-api ${versions.slf4j}"
      }
      if (details.requested.name == 'log4j-core') {
        details.useTarget "org.apache.logging.log4j:log4j-core:${versions.log4j2}"
        details.because "Force-use log4j-core ${versions.log4j}"
      }
    }

    resolutionStrategy.failOnVersionConflict()
  }

  idea {
    module {
      outputDir file('build/idea/classes/main')
      testOutputDir file('build/idea/classes/test')
      downloadSources = true
    }
  }
}

subprojects {
  group "org." + project.group

  if (project.file("src/main/java").exists() ||
      project.file("src/test/java").exists() ||
      project.file("src/main/webapp").exists()) {
    apply plugin: 'java'
    apply plugin: 'com.diffplug.gradle.spotless'

    project.archivesBaseName = "carrot2" + project.path.replace(':', '-')

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    spotless {
      java {
        licenseHeaderFile licenseHeader
        lineEndings 'UNIX'
        endWithNewline()
        googleJavaFormat('1.7')
      }
    }

    test {
      maxParallelForks = (int) Math.max(Runtime.runtime.availableProcessors() / 2.0, 4.0)
    }

    dependencies {
      testImplementation project(':test-infra')
    }

    tasks.withType(JavaCompile) {
      options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
      options.encoding = "UTF-8"
    }

    tasks.withType(Jar) {
      manifest {
        attributes("Implementation-Title": project.name,
                   "Implementation-Version": "${project.version} (${gitRev}, ${buildDateTrimmed})")
      }
    }

    javadoc {
      title = "Carrot<sup>2</sup> ${project.name} ${project.version} API Documentation"

      if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
        options.addStringOption('Xdoclint:all,-missing', '-noindex')
      }

      options.encoding = 'UTF-8'

      exclude 'org/carrot2/math/mahout/**'
    }

    afterEvaluate {
      check.dependsOn(spotlessCheck)

      tasks.withType(AbstractArchiveTask) {
        duplicatesStrategy = 'fail'
      }

      if (project.plugins.hasPlugin(WarPlugin)) {
        configurations {
          war {}
        }

        artifacts {
          war tasks.war
        }

        dependencies {
          providedCompile "javax.servlet:javax.servlet-api:${versions.servletapi}@jar"
        }
      }
    }
  }
}

// Configure gradle projects

project(':doc') {
  // Gatsby has a non-configurable output folder, sigh.
  // https://github.com/gatsbyjs/gatsby/issues/1878
  buildDir = file("public")

  afterEvaluate {
    yarnInstall.doFirst {
      logger.warn("Gatsby/ yarn hack: cleaning up .cache/public.")
      delete project.files(".cache")
      delete project.files("public")
    }
  }
}

configure(subprojects.findAll { it.path in [":dcs:contexts:frontend", ":doc"] }) {
  apply from: rootProject.file("gradle/yarn-project.gradle")
}

// Apply yarn scheduling fix so that dependencies are not fetched in parallel.
def first = null
configure(subprojects) {
  afterEvaluate {
    project.tasks.findAll({ it.name == "yarnInstall" }).each {
      if (first != null) {
        it.mustRunAfter(first)
        it.doFirst {
          logger.warn("Scheduled ${it} to run after ${first} (to prevent concurrent install clashes).")
        }
      }
      first = it
    }
  }
}

configure(subprojects.findAll { it.path in publishedProjects }) {
  apply plugin: 'maven-publish'
  apply plugin: 'signing'

  afterEvaluate {
    task sourcesJar(type: Jar, dependsOn: classes) {
      archiveClassifier = 'sources'
      from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
      archiveClassifier = 'javadoc'
      from javadoc.destinationDir
    }

    task mavenLocal(dependsOn: publishAllPublicationsToBuildRepository) {
      group "Publishing"
      description "Publish Maven artifacts locally to " + file(mavenBuildRepo)
    }

    task mavenSonatype(dependsOn: publishAllPublicationsToSonatypeRepository) {
      group "Publishing"
      description "Publish Maven artifacts to Sonatype OSS Nexus"
    }
  }

  publishing {
    repositories {
      maven {
        name = 'build'
        url = mavenBuildRepo
      }
      maven {
        name = 'sonatype'
        url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
        credentials {
            if (project.hasProperty('nexusUsername')) {
              username project.nexusUsername
            }
            if (project.hasProperty('nexusPassword')) {
              password project.nexusPassword
            }
        }
      }
    }

    publications {
      maven(MavenPublication) {
        afterEvaluate {
          from components.java
          artifactId = project.archivesBaseName

          artifact sourcesJar
          artifact javadocJar
        }

        pom {
          name = "Carrot2 (${project.name})"
          description = "Carrot2 Text Clustering Library"
          url = 'https://project.carrot2.org'
          inceptionYear = "2001"
          licenses {
            license {
              name = 'BSD License'
              url = 'https://www.carrot2.org/carrot2.LICENSE'
            }
          }
          organization {
            name = "Carrot Search s.c."
            url = "https://www.carrotsearch.com"
          }
          developers {
            developer {
              id = 'stanislaw.osinski'
              name = 'Stanisław Osiński'
              email = 'stanislaw.osinski@carrotsearch.com'
            }
            developer {
              id = 'dawid.weiss'
              name = 'Dawid Weiss'
              email = 'dawid.weiss@carrotsearch.com'
            }
          }
          scm {
            connection = 'scm:git:git@github.com:carrot2/carrot2.git'
            developerConnection = 'scm:git:git@github.com:carrot2/carrot2.git'
            url = 'https://github.com/carrot2/carrot2'
          }
        }
      }
    }
  }

  signing {
    sign publishing.publications.maven
  }
}
