
apply from: file('gradle/min-gradle-version.gradle')
apply from: file('gradle/loadProperties.gradle')
apply from: file('gradle/gitinfo.gradle')
apply from: file('gradle/buildinfo.gradle')

allprojects {
  version = '4.0'
}

ext {
  versions = [:]

  mavenBuildRepo = "${rootProject.buildDir}/maven"

  legal = files('carrot2.LICENSE')

  gitRev = gitStatus.id

  replaceTokens = [
    'version': rootProject.version,
    'gitRev': gitRev,
    'buildDate': buildDate,
    'buildDateTrimmed': buildDateTrimmed
  ]
}

configure(rootProject) { project ->
  loadProperties(file('dependencies.versions'), ext.versions)
}

subprojects { project ->
  group "org." + project.group

  afterEvaluate {
    if (project.plugins.hasPlugin(JavaPlugin)) {
      project.archivesBaseName = "carrot2" + project.path.replace(':', '-')
    }
  }
}

configure(subprojects.findAll { it.name == "core" }) {
  apply plugin: 'maven-publish'
  apply plugin: 'signing'

  afterEvaluate {
    task sourcesJar(type: Jar) {
      archiveClassifier = 'sources'
      from sourceSets.main.allJava
    }
  }

  publishing {
    repositories {
      maven {
        name = 'build'
        url = mavenBuildRepo
      }
    }

    publications {
      maven(MavenPublication) {
        afterEvaluate {
            from components.java
            artifactId = project.archivesBaseName

            artifact sourcesJar
        }

        // artifact javadocJar
        pom {
          name = "Carrot2 (${project.name})"
          description = "Carrot2 Text Clustering Library"
          url = 'https://project.carrot2.org'
          licenses {
            license {
              name = 'BSD License'
              url = 'https://www.carrot2.org/carrot2.LICENSE'
            }
          }
          scm {
            connection = 'scm:git:git@github.com:carrot2/carrot2.git'
            developerConnection = 'scm:git:git@github.com:carrot2/carrot2.git'
            url = 'https://github.com/carrot2/carrot2'
          }
        }
      }
    }
  }

  signing {
    sign publishing.publications.maven
  }
}

allprojects {
  apply plugin: 'idea'

  repositories {
    mavenCentral()
  }

  idea {
    module {
      outputDir file('build/idea/classes/main')
      testOutputDir file('build/idea/classes/test')
      downloadSources = true
    }
  }

  afterEvaluate {
    if (project.plugins.hasPlugin(JavaPlugin)) {
      sourceCompatibility = 1.8
      targetCompatibility = 1.8

      compileJava.options.encoding = "UTF-8"
      compileTestJava.options.encoding = "UTF-8"

      dependencies {
        testImplementation project(':test-infra')
      }

      tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
      }

      tasks.withType(Jar) {
        manifest {
          attributes("Implementation-Title": project.name,
                     "Implementation-Version": "${version} (${gitRev}, ${buildDateTrimmed})")
        }
      }
    }
  }

  afterEvaluate {
    if (project.plugins.hasPlugin(WarPlugin)) {
      configurations {
        war {}
      }

      artifacts {
        war tasks.war
      }

      dependencies {
        providedCompile "javax.servlet:javax.servlet-api:${versions.servletapi}@jar"
      }
    }
  }
}

task clean(type: Delete) {
  delete rootProject.buildDir
}