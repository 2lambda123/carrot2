
plugins {
  id 'com.github.sherter.google-java-format' version '0.8' apply false
}

apply from: file('gradle/min-gradle-version.gradle')
apply from: file('gradle/loadProperties.gradle')
apply from: file('gradle/gitinfo.gradle')
apply from: file('gradle/buildinfo.gradle')

allprojects {
  version = '4.0'
}

ext {
  versions = [:]

  mavenBuildRepo = "${rootProject.buildDir}/maven"

  legal = files('carrot2.LICENSE')

  gitRev = gitStatus.id

  isIdea = System.getProperty("idea.active") != null || gradle.startParameter.taskNames.contains('idea') || gradle.startParameter.taskNames.contains('cleanIdea')

  replaceTokens = [
    'version': rootProject.version,
    'gitRev': gitRev,
    'buildDate': buildDate,
    'buildDateTrimmed': buildDateTrimmed
  ]
}
  
configure(rootProject) { project ->
  loadProperties(file('dependencies.versions'), ext.versions)
}

subprojects { project ->
  group "org." + project.group

  afterEvaluate {
    if (project.plugins.hasPlugin(JavaPlugin)) {
      project.archivesBaseName = "carrot2" + project.path.replace(':', '-')
    }
  }
}

configure(subprojects.findAll { it.name == "core" }) {
  apply plugin: 'maven-publish'
  apply plugin: 'signing'

  afterEvaluate {
    task sourcesJar(type: Jar, dependsOn: classes) {
      archiveClassifier = 'sources'
      from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
      archiveClassifier = 'javadoc'
      from javadoc.destinationDir
    }

    task mavenLocal(dependsOn: publishAllPublicationsToBuildRepository) {
      group "Publishing"
      description "Publish Maven artifacts locally to " + file(mavenBuildRepo)
    }

    task mavenSonatype(dependsOn: publishAllPublicationsToSonatypeRepository) {
      group "Publishing"
      description "Publish Maven artifacts to Sonatype OSS Nexus"
    }
  }

  publishing {
    repositories {
      maven {
        name = 'build'
        url = mavenBuildRepo
      }
      maven {
        name = 'sonatype'
        url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
        credentials {
            if (project.hasProperty('nexusUsername')) {
              username project.nexusUsername
            }
            if (project.hasProperty('nexusPassword')) {
              password project.nexusPassword
            } 
        }
      }
    }

    publications {
      maven(MavenPublication) {
        afterEvaluate {
          from components.java
          artifactId = project.archivesBaseName

          artifact sourcesJar
          artifact javadocJar
        }

        pom {
          name = "Carrot2 (${project.name})"
          description = "Carrot2 Text Clustering Library"
          url = 'https://project.carrot2.org'
          inceptionYear = "2001"
          licenses {
            license {
              name = 'BSD License'
              url = 'https://www.carrot2.org/carrot2.LICENSE'
            }
          }
          organization {
            name = "Carrot Search s.c."
            url = "https://www.carrotsearch.com"
          }
          developers {
            developer {
              id = 'stanislaw.osinski'
              name = 'Stanisław Osiński'
              email = 'stanislaw.osinski@carrotsearch.com'
            }
            developer {
              id = 'dawid.weiss'
              name = 'Dawid Weiss'
              email = 'dawid.weiss@carrotsearch.com'
            }
          }
          scm {
            connection = 'scm:git:git@github.com:carrot2/carrot2.git'
            developerConnection = 'scm:git:git@github.com:carrot2/carrot2.git'
            url = 'https://github.com/carrot2/carrot2'
          }
        }
      }
    }
  }

  signing {
    sign publishing.publications.maven
  }
}

allprojects {
  apply plugin: 'idea'
  apply plugin: 'com.github.sherter.google-java-format'

  repositories {
    mavenCentral()
  }

  idea {
    module {
      outputDir file('build/idea/classes/main')
      testOutputDir file('build/idea/classes/test')
      downloadSources = true
    }
  }

  afterEvaluate {
    if (project.plugins.hasPlugin(JavaPlugin)) {
      sourceCompatibility = 1.8
      targetCompatibility = 1.8

      compileJava.options.encoding = "UTF-8"
      compileTestJava.options.encoding = "UTF-8"

      test {
        maxParallelForks = Math.max(Runtime.runtime.availableProcessors() / 2.0, 4.0)
      }

      dependencies {
        testImplementation project(':test-infra')
      }

      tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
      }

      tasks.withType(Jar) {
        manifest {
          attributes("Implementation-Title": project.name,
                     "Implementation-Version": "${version} (${gitRev}, ${buildDateTrimmed})")
        }
      }

      googleJavaFormat {
        toolVersion = '1.7'
      }
      check.dependsOn(googleJavaFormat)

      javadoc {
        title = "Carrot<sup>2</sup> ${project.version} API Documentation"

        if (JavaVersion.current().isJava9Compatible()) {
          options.addBooleanOption('html5', true)
          options.addStringOption('Xdoclint:all,-missing', '-noindex')
          options.encoding = 'UTF-8'
        }

        exclude 'org/carrot2/math/mahout/**'
      }
    }
  }

  afterEvaluate {
    project.tasks.withType(AbstractArchiveTask) { task ->
      duplicatesStrategy = 'fail'
    }
  }

  afterEvaluate {
    if (project.plugins.hasPlugin(WarPlugin)) {
      configurations {
        war {}
      }

      artifacts {
        war tasks.war
      }

      dependencies {
        providedCompile "javax.servlet:javax.servlet-api:${versions.servletapi}@jar"
      }
    }
  }
}

task clean(type: Delete) {
  delete rootProject.buildDir
}